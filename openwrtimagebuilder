#!/usr/bin/env bash

## a basic script for building openwrt images for
## the TPLink Archer C7 v2 on ubuntu 20.04

# recovery instructions:
# set up tftpd server listening on 192.168.0.66 serving ArcherC7v2_tp_recovery.bin (stripped, non-boot)
# available at https://cdn.seedno.de/misc/ArcherC7v2_tp_recovery.bin
# plug ethernet cable into LAN1 on Archer C7, unplugging any cable in WAN port
# power up router, then immediately press and hold the WPS/Reset button until the WPS light turns on
# wait ~2 minutes for router to complete reset

# when first upgrading to openwrt from old tplink firmware, you may need to rename the file factory.bin

## install all dependencies (uncomment and run script as root/sudo if needed)
# create array of dependencies
# $ declare -a dependencies=("subversion" "g++" "zlib1g-dev" "build-essential" "git" "python" "rsync" "man-db" "gawk" "libncurses5-dev" "gettext" "unzip" "file" "libssl-dev" "wget" "zip" "time")

# check if dependencies are installed; if not, error out
# $ for dependency in "${dependencies[@]}"; do
# $  sudo dpkg-query -W "$dependency" >/dev/null 2>&1 || { echo >&2 "$dependency is not installed. Please install it manually and re-run the script."; exit 1; }
# $ done

# fail in a sane manner
set -eo pipefail

# make sure the correct number of arguments are passed; if not, output syntax and exit
if [ "$#" -ne 0 ]; then
	echo -e "\nUsage: openwrt_image_builder.sh\n"
	exit 1
fi

# set hostname to first argument
hostname="tether"

# set base directory
basedir="$(pwd)/$hostname"

# set logfile location
logfile="$basedir/build-$(date +%Y%m%d%H%M%S).log"

# set imagebuilder directory
imagebuilderdir="$basedir/imagebuilder"

# set OpenWRT imagebuilder version to use
release="19.07.2"
version="openwrt-imagebuilder-$release-ar71xx-generic.Linux-x86_64"
tarball="https://downloads.openwrt.org/releases/$release/targets/ar71xx/generic/$version.tar.xz"


# delete any old builds if they exist
if [ -d "$imagebuilderdir/$version" ]; then
	echo -e "\nRemoving old imagebuilder files..." >> "$logfile" 2>&1
	rm -rf "$imagebuilderdir/$version"
fi

# create base directory for account
mkdir -p "$imagebuilderdir"

# display log location
echo -e "\nLogging all build output to $logfile\n"

# prepend timestamp to logfile
echo -e "\n\nBuild began at $(date +%Y/%m/%d-%H:%M).\n\n" >> "$logfile" 2>&1

# wrap the script into a function for logging purposes
{

# display imagebuilder version
echo "Imagebuilder version set to $version"

# display imagebuilder directory
echo "imagebuilder directory is $imagebuilderdir"

# set and display working directory
workdir="$imagebuilderdir/$version"
echo "Working directory is $workdir"

# download and extract the openwrt imagebuilder tool
echo "Downloading imagebuilder tarball..."
mkdir -p "$imagebuilderdir"
curl -s "$tarball" | tar -xJf - -C "$imagebuilderdir"
echo "Imagebuilder downloaded."

# create directory for file overrides; this will serve as the effective / for any overwriting files
# i.e. files/etc/dropbear/authorized_keys will be located at /etc/dropbear/authorized_keys in the final squashfs image
echo "Creating required directories..."
mkdir -p "$workdir"/files/etc/config
mkdir -p "$workdir"/files/etc/rc.button
mkdir -p "$workdir"/files/etc/init.d
mkdir -p "$workdir"/files/etc/crontabs

# finished creating directories
echo "Finished creating directories."

# begin generating config files
echo "Generating system config files..."

# set login credentials
cat <<'EOL' | tee "$workdir"/files/etc/shadow
root:$1$Bi5SZzpW$o3ymak7u35zX.fuuGCjt2.:18396:0:99999:7:::
daemon:*:0:0:99999:7:::
ftp:*:0:0:99999:7:::
network:*:0:0:99999:7:::
nobody:*:0:0:99999:7:::
dnsmasq:x:0:0:99999:7:::
EOL

# create dnsmasq configs and disable win2k filtering (which breaks jabber/xmpp)
cat <<'EOL' | tee "$workdir"/files/etc/config/dhcp
config dnsmasq
option domainneeded '1'
option localise_queries '1'
option rebind_protection '1'
option rebind_localhost '1'
option local '/lan/'
option domain 'lan'
option expandhosts '1'
option authoritative '1'
option readethers '1'
option leasefile '/tmp/dhcp.leases'
option resolvfile '/tmp/resolv.conf.auto'
option localservice '1'
option nonwildcard '0'
option filterwin2k '0'
option nonegcache '1'1
option sequential_ip '1'

config dhcp 'LAN'
option interface 'LAN'
option ignore '1'

config dhcp 'WAN'
option interface 'USB'
option ignore '1'

config dhcp 'MGMT'
option start '100'
option leasetime '12h'
option limit '150'
option interface 'MGMT'
option force '1'

config odhcpd 'odhcpd'
option maindhcp '0'
option leasefile '/tmp/hosts/odhcpd'
option leasetrigger '/usr/sbin/odhcpd-update'
EOL

# create firewall rules for remote administration
cat <<EOL | tee "$workdir"/files/etc/config/firewall
config defaults
option input 'ACCEPT'
option forward 'ACCEPT'
option output 'ACCEPT'
option drop_invalid '1'
option synflood_protect '1'

config include
option path /etc/firewall.user
EOL

# set ssh listen port to tcp/9022 on the wan and disable password login
cat <<'EOL' | tee "$workdir"/files/etc/config/dropbear
config dropbear
option PasswordAuth 'on'
option Port '9022'
EOL

# set up a uhttpd instance listening on 443/tcp on the mgmt network
cat <<EOL | tee "$workdir"/files/etc/config/uhttpd
config uhttpd 'luci'
list listen_https '0.0.0.0:443'
option home '/www'
option rfc1918_filter '1'
option max_requests '3'
option max_connections '100'
option cert '/etc/uhttpd.crt'
option key '/etc/uhttpd.key'
option cgi_prefix '/cgi-bin'
option script_timeout '60'
option network_timeout '30'
option http_keepalive '20'
option tcp_keepalive '1'
option ubus_prefix '/ubus'

config cert 'px5g'
option days '3650'
option bits '1024'
option country 'US'
option state 'Minnesota'
option location 'Minneapolis'
option commonname 'OpenWRT'
EOL

# set hostname, timezone, and other system info
cat <<EOL | tee "$workdir"/files/etc/config/system
config system
option cronloglevel '8'
option zonename 'America/Chicago'
option timezone 'CST6CDT,M3.2.0,M11.1.0'
option hostname '$hostname'
option conloglevel '5'
option log_size '1024'

config timeserver 'ntp'
option enabled '1'
list server 'time.nist.gov'
list server 'time.windows.com'

config led 'led_wlan2g'
option name 'WLAN2G'
option sysfs 'tp-link:blue:wlan2g'
option trigger 'phy1tpt'

config led 'led_wlan5g'
option name 'WLAN5G'
option sysfs 'tp-link:blue:wlan5g'
option trigger 'phy0tpt'

config led
option default '0'
option name 'System'
option sysfs 'tp-link:blue:system'
option trigger 'none'
EOL

# configure interfaces
cat <<EOL | tee "$workdir"/files/etc/config/network
config interface 'loopback'
option ifname 'lo'
option proto 'static'
option ipaddr '127.0.0.1'
option netmask '255.0.0.0'

config globals 'globals'

config interface 'LAN'
option type 'bridge'
option proto 'static'
option ipaddr '192.168.0.1'
option netmask '255.255.255.0'
option ifname 'eth1'
option ipv6 '0'

config interface 'RELAY'
option proto 'relay'
option ipaddr ''
list network 'LAN'

config interface 'WAN_USB'
option ifname 'usb0'
option proto 'dhcp'
option ipv6 '0'

config interface 'WAN_WIFI_2'
option ifname 'wlan1'
option proto 'dhcp'
option ipv6 '0'

config interface 'WAN_WIFI_5'
option ifname 'wlan0'
option proto 'dhcp'
option ipv6 '0'

config switch
option name 'switch0'
option reset '1'
option enable_vlan '1'

config switch_vlan
option device 'switch0'
option vlan '1'
option ports '0 2 3 4 5'

config switch_vlan
option device 'switch0'
option vlan '2'
option ports '1 6'
EOL

# set default ssid/password
cat <<EOL | tee "$workdir"/files/etc/config/wireless
config wifi-device 'radio0'
option type 'mac80211'
option hwmode '11a'
option path 'pci0000:01/0000:01:00.0'
option htmode 'VHT80'
option txpower '23'
option country 'US'

config wifi-device 'radio1'
option type 'mac80211'
option channel '11'
option hwmode '11g'
option path 'platform/qca955x_wmac'
option htmode 'HT20'
option txpower '23'
option country 'US'

config wifi-iface 'wifinet0'
option ssid 'Paranoia'
option encryption 'psk2'
option key 'ripripenable'
option device 'radio0'
option mode 'sta'
option network 'WAN_WIFI_5'
option ifname 'wlan0'

config wifi-iface 'wifinet1'
option ssid 'Paranoia'
option encryption 'psk2'
option key 'ripripenable'
option device 'radio1'
option mode 'sta'
option network 'WAN_WIFI_2'
option ifname 'wlan1'
EOL

# create an empty script for the wps trigger
# we only want wps to be activated via script
cat <<'EOL' | tee "$workdir"/files/etc/rc.button/wps
# do nothing on wps button press
EOL

# create relayd address update script
cat <<'EOL' | tee "$workdir"/files/etc/init.d/relayaddr
#!/usr/bin/env ash

# retrieve current relay ip address
OLD_RELAY_IP="$(uci get network.RELAY.ipaddr)"

# retrieve current relay interface
OLD_RELAY_INTERFACE="$(uci get network.RELAY.network | awk '{print $2}')"

# update 2.4ghz wifi tether
WIFI_2_INTERFACE="wlan1"
WIFI_2_IP="$(ip -f inet addr show $WIFI_2_INTERFACE | grep inet | awk '{print $2}' | cut -d "/" -f1)"
if [ "$WIFI_2_IP" = "" ]; then
	echo "No 2.4GHz WiFi tether detected."
else
	echo "2.4GHz WiFi tether with address $WIFI_2_IP found."

	# store relay interface ip address
	NEW_RELAY_IP="$WIFI_2_IP"

	# store relay network device
	NEW_RELAY_INTERFACE="WAN_WIFI_2"

	# store expected interface argument for relayd
	EXPECTED_INTERFACE="$WIFI_2_INTERFACE"
fi

# update 5ghz wifi tether
WIFI_5_INTERFACE="wlan0"
WIFI_5_IP="$(ip -f inet addr show $WIFI_5_INTERFACE | grep inet | awk '{print $2}' | cut -d "/" -f1)"
if [ "$WIFI_5_IP" = "" ]; then
	echo "No 5GHz WiFi tether detected."
else
	echo "5GHz WiFi tether with address $WIFI_5_IP found."

	# store relay interface ip address
	NEW_RELAY_IP="$WIFI_5_IP"

	# store relay network device
	NEW_RELAY_INTERFACE="WAN_WIFI_5"

	# store expected interface argument for relayd
	EXPECTED_INTERFACE="$WIFI_5_INTERFACE"
fi

# update usb tether
USB_INTERFACE="usb0"
USB_IP="$(ip -f inet addr show $USB_INTERFACE | grep inet | awk '{print $2}' | cut -d "/" -f1)"
if [ "$USB_IP" = "" ]; then
	echo "No USB tether detected."
else
	echo "USB tether with address $USB_IP found."

	# store new relay interface ip address
	NEW_RELAY_IP="$USB_IP"

	# store new relay network device
	NEW_RELAY_INTERFACE="WAN_USB"

	# store expected interface argument for relayd
	EXPECTED_INTERFACE="$USB_INTERFACE"
fi

# check if ip has changed
if [ "$NEW_RELAY_IP" = "$OLD_RELAY_IP" ]; then
	echo "IP hasn't changed. Skipping address update."
else
	echo "IP has changed. Updating to new address of $NEW_RELAY_IP."

	# set new relay interface ip address
	uci set network.RELAY.ipaddr="$NEW_RELAY_IP"

	# queue changes
	SHOULD_COMMIT="true"
fi

# check if interface has changed
if [ "$NEW_RELAY_INTERFACE" = "$OLD_RELAY_INTERFACE" ]; then
	echo "Interface hasn't changed. Skipping interface update."
else
	echo "Interface has changed. Updating to new interface $NEW_RELAY_INTERFACE."

	# set new relay interface ip address
	uci set network.RELAY.network="LAN $NEW_RELAY_INTERFACE"

	# queue changes
	SHOULD_COMMIT="true"
fi

# commit changes if needed
if [ "$SHOULD_COMMIT" = "true" ]; then
	# commit changes to interface and/or ip address
	uci commit

	# queue relayd restart
	SHOULD_RESTART="true"
fi

# if relayd is using the wrong interface, queue a restart
if ! ps | grep "/usr/sbin/relayd -I br-LAN -I $EXPECTED_INTERFACE" 2>&1 >/dev/null; then
	echo "Wrong interface selected in relayd. Restarting process."

	# queue relayd restart
	SHOULD_RESTART="true"
fi

# restart relayd if needed
if [ "$SHOULD_RESTART" = "true" ]; then
	# restart relayd to apply new interface and/or ip address
	/etc/init.d/relayd restart
fi
EOL

# add root crontab to run the relayd address update script every minute
cat <<'EOL' | tee "$workdir"/files/etc/crontabs/root
* * * * * /etc/init.d/relayaddr
EOL

# finished writing config files
echo "Config files written."

# fix permissions
echo "Setting permissions for all modified directories..."
chmod 0755 "$workdir"/files/etc/rc.button/wps
chmod 0755 "$workdir"/files/etc/init.d/relayaddr
echo "Permissions set."

# build the image; the output will be located in $basedir/bin/targets/ar71xx/generic/
# - image for web ui upgrade: "$HOME"/"$hostname"/factory.bin
# - image for cli upgrade: "$HOME"/"$hostname"/sysupgrade.bin
echo "Building OpenWRT image..."
cd "$workdir" && \
make image \
PROFILE='archer-c7-v2' \
PACKAGES='luci-ssl luci-app-statistics tmux iwinfo wpad hostapd-utils relayd luci-proto-relay kmod-usb-net kmod-usb-net-cdc-ether kmod-usb-net-rndis -wpad-basic -wpad-mini -ppp -ppp-mod-pppoe' \
FILES=files && \
cp "$workdir"/bin/targets/ar71xx/generic/*-generic-archer-c7-v2-squashfs-factory-us.bin "$basedir"/factory.bin && \
cp "$workdir"/bin/targets/ar71xx/generic/*-generic-archer-c7-v2-squashfs-sysupgrade.bin "$basedir"/sysupgrade.bin

# end function
} 2>&1 | tee -a "$logfile" >/dev/null

# append timestamp to logfile
echo -e "Finished building OpenWRT image.\n\nBuild finished at $(date +%Y/%m/%d-%H:%M).\n" >> "$logfile"

# display build completion status
echo -e "Build complete!\n"
